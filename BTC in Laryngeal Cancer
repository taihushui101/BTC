library(limma)
library(ComplexHeatmap)
expFile="geneExp.txt"        
cliFile="clinical.txt"       
setwd("/")      

 
rt=read.table(expFile, header=T, sep="\t", check.names=F, row.names=1)
gene=colnames(rt)[1]

 
tumorData=rt[rt$Type=="Tumor",1,drop=F]
tumorData=as.matrix(tumorData)
rownames(tumorData)=gsub("(.*?)\\-(.*?)\\-(.*?)\\-(.*?)\\-.*", "\\1\\-\\2\\-\\3", rownames(tumorData))
data=avereps(tumorData)

 e=ifelse(data[,gene]>median(data[,gene]), "High", "Low")
Type=factor(Type, levels=c("Low","High"))
data=cbind(as.data.frame(data), Type)
data=data[order(data[,gene]),] 

cli[,"Age"]=ifelse(cli[,"Age"]=="unknow", "unknow", ifelse(cli[,"Age"]>65,">65","<=65"))

data=data[samSample,"Type",drop=F]
cli=cli[samSample,,drop=F]
rt=cbind(data, cli)

for(clinical in colnames(rt[,2:ncol(rt)])){
	data=rt[c("Type", clinical)]
	colnames(data)=c("Type", "clinical")
	data=data[(data[,"clinical"]!="unknow"),]
	tableStat=table(data)
	stat=chisq.test(tableStat)
	pvalue=stat$p.value
	Sig=ifelse(pvalue<0.001,"***",ifelse(pvalue<0.01,"**",ifelse(pvalue<0.05,"*","")))
	sigVec=c(sigVec, paste0(clinical, Sig))
}
colnames(rt)=sigVec

bioCol=c("#0066FF","#FF9900","#FF0000","#ed1299", "#0dbc21", "#246b93", "#cc8e12", "#d561dd", "#c93f00", 
         "#ce2523", "#f7aa5d", "#9ed84e", "#39ba30", "#6ad157", "#373bbf", "#a1ce4c", "#ef3bb6", "#d66551",
         "#1a918f", "#7149af", "#ff66fc", "#2927c4", "#57e559" ,"#8e3af4" ,"#f9a270" ,"#22547f", "#db5e92",
         "#4aef7b", "#e86502",  "#99db27", "#e07233", "#8249aa","#cebb10", "#03827f", "#931635", "#ff523f",
         "#edd05e", "#6f25e8", "#0dbc21", "#167275", "#280f7a", "#6373ed", "#5b910f" ,"#7b34c1" ,"#0cf29a" ,"#d80fc1",
         "#dd27ce", "#07a301", "#ddd53e",  "#391c82", "#2baeb5","#925bea", "#09f9f5",  "#63ff4f")
colorList=list()
colorList[[gene]]=c("Low"="blue", "High"="red")
j=0
for(cli in colnames(rt[,2:ncol(rt)])){
	cliLength=length(levels(factor(rt[,cli])))
	cliCol=bioCol[(j+1):(j+cliLength)]
	j=j+cliLength
	names(cliCol)=levels(factor(rt[,cli]))
	cliCol["unknow"]="grey75"
	colorList[[cli]]=cliCol
}
zero_row_mat=matrix(nrow=0, ncol=nrow(rt))
Hm=Heatmap(zero_row_mat, top_annotation=ha)

draw(Hm, merge_legend = TRUE, heatmap_legend_side = "bottom", annotation_legend_side = "bottom")
dev.off()

 
library(limma)
library(reshape2)
library(ggpubr)
library(vioplot)
library(ggExtra)

expFile="geneExp.txt"               
immFile="CIBERSORT-Results.txt"     
pFilter=0.05             
setwd("/")     

 
rt=read.table(expFile, header=T, sep="\t", check.names=F, row.names=1)
gene=colnames(rt)[1]

 
tumorData=rt[rt$Type=="Tumor",1,drop=F]
tumorData=as.matrix(tumorData)
rownames(tumorData)=gsub("(.*?)\\-(.*?)\\-(.*?)\\-(.*?)\\-.*", "\\1\\-\\2\\-\\3", rownames(tumorData))
data=avereps(tumorData)

 a=as.data.frame(data)
data$gene=ifelse(data[,gene]>median(data[,gene]), "High", "Low")

#??? une=read.table(immFile, header=T, sep="\t", check.names=F, row.names=1)
immune=immune[immune[,"P-value"]<pFilter,]
immune=as.matrix(immune[,1:(ncol(immune)-3)])

group=sapply(strsplit(row.names(immune),"\\-"), "[", 4)
group=sapply(strsplit(group,""), "[", 1)
group=gsub("2", "1", group)
immune=immune[group==0,]
row.names(immune)=gsub("(.*?)\\-(.*?)\\-(.*?)\\-(.*?)\\-.*", "\\1\\-\\2\\-\\3", row.names(immune))
immune=avereps(immune)

 eSample=intersect(row.names(immune), row.names(data))
rt=cbind(immune[sameSample,,drop=F], data[sameSample,,drop=F])

data=melt(data,id.vars=c("gene"))
colnames(data)=c("gene", "Immune", "Expression")
#??? up=levels(factor(data$gene))
data$gene=factor(data$gene, levels=c("Low","High"))
bioCol=c("#0066FF","#FF0000","#6E568C","#7CC767","#223D6C","#D20A13","#FFD121","#088247","#11AA4D")
bioCol=bioCol[1:length(group)]
boxplot=ggboxplot(data, x="Immune", y="Expression", fill="gene",
				  xlab="",
				  ylab="Fraction",
				  legend.title=gene,
				  width=0.8,
				  palette=bioCol)+
				  rotate_x_text(50)+
	stat_compare_means(aes(group=gene),symnum.args=list(cutpoints=c(0, 0.001, 0.01, 0.05, 1), symbols=c("***", "**", "*", "")), label="p.signif")

print(boxplot)
dev.off()

for(i in colnames(rt)[1:(ncol(rt)-2)]){
	x=as.numeric(rt[,gene])
	y=as.numeric(rt[,i])
	if(sd(y)==0){y[1]=0.00001}
	cor=cor.test(x, y, method="spearman")
	outVector=cbind(Cell=i, cor=cor$estimate, pvalue=cor$p.value)
	outTab=rbind(outTab,outVector)
	if(cor$p.value<0.05){
		outFile=paste0("cor.", i, ".pdf")
		df1=as.data.frame(cbind(x,y))
		p1=ggplot(df1, aes(x, y)) + 
				  xlab(paste0(gene, " expression")) + ylab(i)+
				  geom_point() + geom_smooth(method="lm",formula = y ~ x) + theme_bw()+
				  stat_cor(method = 'spearman', aes(x =x, y =y))
		p2=ggMarginal(p1, type="density", xparams=list(fill = "orange"), yparams=list(fill = "blue"))
		#? df(file=outFile, width=5.2, height=5)
		print(p2)
		dev.off()
	}
}
 
library(GenomicRanges)
library(stats4)
library(BiocGenerics)
library(celldex)
library(SingleR)
library(ggplot2)
library(splines)
library(VGAM)
library(Matrix)
library(irlba)
library(DDRTree)
library(irlba)
library(monocle)
library(ggraph)
library(clustree)
library(Rcpp)
library(harmony)

logFCfilter=1          
adjPvalFilter=0.05     

workDir="/ "
setwd(workDir)

dirs=list.dirs(workDir)
dirs_sample=dirs[-1]
names(dirs_sample)=gsub(".+\\/(.+)", "\\1", dirs_sample)
counts <- Read10X(data.dir = dirs_sample)
pbmc = CreateSeuratObject(counts, min.cells=3, min.features=100)

pbmc[["percent.mt"]] <- PercentageFeatureSet(object = pbmc, pattern = "^MT-")

pdf(file="01.featureViolin.pdf", width=10, height=6.5)
VlnPlot(object = pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol=3)
dev.off()
pbmc=subset(x = pbmc, subset = nFeature_RNA > 50 & percent.mt < 15)    #?????ݽ??й???

pdf(file="01.featureCor.pdf", width=13, height=7)
plot1 <- FeatureScatter(object = pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA",pt.size=1.5)
plot2 <- FeatureScatter(object = pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt",,pt.size=1.5)
CombinePlots(plots = list(plot1, plot2))
dev.off()

pbmc <- NormalizeData(object=pbmc, normalization.method="LogNormalize", scale.factor=10000)

pbmc <- FindVariableFeatures(object=pbmc, selection.method="vst", nfeatures=1500)

top10 <- head(x = VariableFeatures(object = pbmc), 10)
pdf(file="01.featureVar.pdf", width=10, height=6)
plot1 <- VariableFeaturePlot(object = pbmc)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
CombinePlots(plots = list(plot1, plot2))
dev.off()

pbmc=ScaleData(pbmc)         
pbmc=RunPCA(object= pbmc, npcs=20, pc.genes=VariableFeatures(object=pbmc))     #PCA????
pbmc=RunHarmony(pbmc, "orig.ident")

pdf(file="02.pcaGene.pdf", width=10, height=8)
VizDimLoadings(object = pbmc, dims = 1:4, reduction = "pca", nfeatures=20)
dev.off()

pdf(file="02.PCA.pdf", width=7.5, height=5)
DimPlot(object=pbmc, reduction="pca")
dev.off()

pdf(file="02.pcaHeatmap.pdf", width=10, height=8)
DimHeatmap(object=pbmc, dims=1:4, cells=500, balanced=TRUE, nfeatures=30, ncol=2)
dev.off()

pbmc <- JackStraw(object=pbmc, num.replicate=100)
pbmc <- ScoreJackStraw(object = pbmc, dims = 1:20)
pdf(file="02.pcaJackStraw.pdf",width=8,height=6)
JackStrawPlot(object=pbmc, dims=1:20)
dev.off()

pcSelect=20
pbmc <- FindNeighbors(object = pbmc, dims = 1:pcSelect)     

pbmc <- FindClusters(pbmc, resolution=seq(0.5, 1.2, by=0.1))
pbmc <- FindClusters(object = pbmc, resolution=0.6)

pdf(file="03.cluster.pdf", width=7, height=6)
#pbmc <-RunUMAP(object = pbmc, dims = 1:pcSelect)       
#DimPlot(pbmc, reduction = "umap", pt.size = 2, label = TRUE)   #UMAP???ӻ?
pbmc <- RunTSNE(object = pbmc, dims = 1:pcSelect)             #TSNE????
TSNEPlot(object = pbmc, pt.size = 2, label = TRUE)     #TSNE???ӻ?
dev.off()
write.table(pbmc$seurat_clusters,file="03.Cluster.txt",quote=F,sep="\t",col.names=F)

pbmc.markers <- FindAllMarkers(object = pbmc,
                               only.pos = FALSE,
                               min.pct = 0.25,
                               logfc.threshold = logFCfilter)
sig.markers=pbmc.markers[(abs(as.numeric(as.vector(pbmc.markers$avg_log2FC)))>logFCfilter & as.numeric(as.vector(pbmc.markers$p_val_adj))<adjPvalFilter),]
write.table(sig.markers,file="03.clusterMarkers.txt",sep="\t",row.names=F,quote=F)

top10 <- pbmc.markers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_log2FC)
#????marker??ÿ??????????ͼ
pdf(file="03.clusterHeatmap.pdf",width=15, height=15)
DoHeatmap(object = pbmc, features = top10$gene) + NoLegend()
dev.off()

pbmc_for_SingleR <- GetAssayData(pbmc, layer="data")
clusters<-pbmc@meta.data$seurat_clusters
ref1=get(load("ref_Human_all.RData"))
ref2=get(load("ref_Hematopoietic.RData"))
ref3=get(load("DatabaseImmuneCellExpressionData.Rdata"))
ref4=get(load("ImmGenData.Rdata"))
singler=SingleR(test=pbmc_for_SingleR, ref =list(ref1, ref2, ref3, ref4),
                labels=list(ref1$label.main,ref2$label.main,ref3$label.main,ref4$label.main), clusters = clusters)

clusterAnn=as.data.frame(singler)
clusterAnn=cbind(id=row.names(clusterAnn), clusterAnn)
clusterAnn=clusterAnn[,c("id", "labels")]
clusterAnn$labels=gsub("_", " ", clusterAnn$labels)
write.table(clusterAnn,file="04.clusterAnn.txt",quote=F,sep="\t", row.names=F)

cellAnn=c()
for(i in 1:length(pbmc$seurat_clusters)){
	index=pbmc$seurat_clusters[i]
	cellAnn=c(cellAnn, clusterAnn[index,2])
}
cellAnnOut=cbind(names(pbmc$seurat_clusters), cellAnn)
colnames(cellAnnOut)=c("id", "labels")
write.table(cellAnnOut, file="04.cellAnn.txt", quote=F, sep="\t", row.names=F)

newLabels=gsub("_", " ", singler$labels)
names(newLabels)=levels(pbmc)
pbmc=RenameIdents(pbmc, newLabels)
pdf(file="04.cellAnn.pdf", width=7.5, height=6)
   
TSNEPlot(object = pbmc, pt.size = 2, label = TRUE)                
dev.off()
Type=gsub("(.*?)\\..*", "\\1", colnames(pbmc))
names(Type)=colnames(pbmc)
pbmc=AddMetaData(object=pbmc, metadata=Type, col.name="Type")
pdf(file="04.group.cellAnn.pdf", width=11, height=6)

TSNEPlot(object = pbmc, pt.size = 1, label = TRUE, split.by="Type")   
dev.off()

groups=gsub("(.*?)\\..*", "\\1", colnames(pbmc))
groups=paste0(groups, "_", cellAnn)
names(groups)=colnames(pbmc)
pbmc=AddMetaData(object=pbmc, metadata=groups, col.name="group")
for(cellName in unique(cellAnn)){
	conName=paste0("Control_", cellName)
	treatName=paste0("Treat_", cellName)
	pbmc.markers=FindMarkers(pbmc, ident.1=treatName, ident.2=conName, group.by='group', logfc.threshold=0.1)
	sig.markersGroup=pbmc.markers[(abs(as.numeric(as.vector(pbmc.markers$avg_log2FC)))>logFCfilter & as.numeric(as.vector(pbmc.markers$p_val_adj))<adjPvalFilter),]
	sig.markersGroup=cbind(Gene=row.names(sig.markersGroup), sig.markersGroup)
	write.table(sig.markersGroup,file=paste0("05.", cellName, ".diffGene.txt"),sep="\t",row.names=F,quote=F)
}

save(pbmc, cellAnn, file="Seurat.Rdata")

monocle.matrix=as.matrix(pbmc@assays$RNA$data)
monocle.sample=pbmc@meta.data
monocle.geneAnn=data.frame(gene_short_name=row.names(monocle.matrix), row.names=row.names(monocle.matrix))
monocle.clusterAnn=clusterAnn
monocle.markers=sig.markers

data <- as(as.matrix(monocle.matrix), 'sparseMatrix')
pd<-new("AnnotatedDataFrame", data = monocle.sample)
fd<-new("AnnotatedDataFrame", data = monocle.geneAnn)
cds <- newCellDataSet(data, phenoData = pd, featureData = fd)
names(pData(cds))[names(pData(cds))=="seurat_clusters"]="Cluster"
pData(cds)[,"Cluster"]=paste0("cluster",pData(cds)[,"Cluster"])

clusterAnn=as.character(monocle.clusterAnn[,2])
names(clusterAnn)=paste0("cluster",monocle.clusterAnn[,1])
pData(cds)$cell_type2 <- plyr::revalue(as.character(pData(cds)$Cluster),clusterAnn)

cds <- estimateSizeFactors(cds)
cds <- estgc()
imateDispersions(cds)
cds <- setgc()
OrderingFilter(cds, as.vector(sig.markers$gene))
cds <- redgc()
uceDimension(cds, max_components = 2, reduction_method = 'DDRTree')
cds <- ordgc()
erCells(cds)

pdf(file="06.trajectory.State.pdf",width=6.5,height=6)
plot_cell_trajectory(cds,color_by = "State")
dev.off()

pdf(file="06.trajectory.Pseudotime.pdf",width=6.5,height=6)
plot_cell_trajectory(cds,color_by = "Pseudotime")
dev.off()

pdf(file="06.trajectory.cellType.pdf",width=6.5,height=6)
plot_cell_trajectory(cds,color_by = "cell_type2")
dev.off()

pdf(file="06.trajectory.cluster.pdf",width=6.5,height=6)
plot_cell_trajectory(cds, color_by = "Cluster")
dev.off()
 
#引用包
library(MatrixGenerics)
library(matrixStats)
library(GenomeInfoDb)
library(S4Vectors)
library(stats4)
library(IRanges)
library(GenomicRanges)
library(SummarizedExperiment)
library(Biobase)
library(Biostrings)
library(XVector)
library(Rsamtools)
library(VariantAnnotation)
library(gwasvcf)
library(ieugwasr)
library(gwasglue)
library(TwoSampleMR)
library(usethis)
library("devtools")
library(httr)

exposureFile="exposure.F.csv"          #暴露数据文件
geneFile="05.Macrophage.diffGene.txt"     #基因列表文件
outcomeID="ebi-a-GCST90018898"         #结局数据ID
outcomeName="Laryngeal cancer"           #设置图形中展示疾病的名称(需修改)
setwd("/")      #设置工作目录

#读取暴露数据
rt=read_exposure_data(filename=exposureFile,
                      sep = ",",
                      snp_col = "SNP",
                      beta_col = "beta.exposure",
                      se_col = "se.exposure",
                      pval_col = "pval.exposure",
                      effect_allele_col="effect_allele.exposure",
                      other_allele_col = "other_allele.exposure",
                      eaf_col = "eaf.exposure",
                      phenotype_col = "exposure",
                      id_col = "id.exposure",
                      samplesize_col = "samplesize.exposure",
                      chr_col="chr.exposure", pos_col = "pos.exposure",
                      clump=FALSE)

#读取基因列表文件
geneRT=read.table(geneFile, header=T, sep="\t", check.names=F, row.names=1)
rt=rt[rt$exposure %in% row.names(geneRT),]

#读取结局数据
outcomeData=extract_outcome_data(snps=rt$SNP, outcomes=outcomeID)
write.csv(outcomeData, file="outcome.csv", row.names=F)

#对差异基因进行循环
outTab=data.frame()
sigTab=data.frame()
for(i in unique(rt$exposure)){
  #提取这个基因的暴露数据
  singleExposureFile=paste0(i, ".exposure.csv")
  exposure_set=rt[rt$exposure==i,]
  if(nrow(exposure_set)>=3){
    write.csv(exposure_set, file=singleExposureFile, row.names=F)
    #读取这个基因的暴露数据
    exposure_dat=read_exposure_data(filename=singleExposureFile,
                                    sep = ",",
                                    snp_col = "SNP",
                                    beta_col = "beta.exposure",
                                    se_col = "se.exposure",
                                    pval_col = "pval.exposure",
                                    effect_allele_col="effect_allele.exposure",
                                    other_allele_col = "other_allele.exposure",
                                    eaf_col = "eaf.exposure",
                                    id_col = "id.exposure",
                                    phenotype_col = "exposure",
                                    samplesize_col = "samplesize.exposure",
                                    chr_col="chr.exposure", pos_col = "pos.exposure",
                                    clump=FALSE)
    file.remove(singleExposureFile)
    
    #读取结局数据
    outcome_data=read_outcome_data(snps=exposure_dat$SNP,
                                   filename="outcome.csv", sep = ",",
                                   snp_col = "SNP",
                                   beta_col = "beta.outcome",
                                   se_col = "se.outcome",
                                   effect_allele_col = "effect_allele.outcome",
                                   other_allele_col = "other_allele.outcome",
                                   pval_col = "pval.outcome",
                                   eaf_col = "eaf.outcome")
    
    #将暴露数据和结局数据合并
    outcome_data$id.outcome=outcomeID
    outcome_data$outcome=outcomeName
    dat=harmonise_data(exposure_dat, outcome_data)
    dat=dat[dat$pval.outcome>0.05,]
    #得到用于孟德尔随机化的工具变量
    snpTab=dat[dat$mr_keep=="TRUE",]
    
    if(nrow(snpTab)>=3){
      #孟德尔随机化分析
      mrResult=mr(dat)
      mrTab=generate_odds_ratios(mrResult)
      outTab=rbind(outTab, mrTab)
      #多效性检验
      pleioTab=mr_pleiotropy_test(dat)
      
      ##########筛选阳性的基因,并对阳性的基因进行可视化#########
      #筛选IVW方法pvalue小于0.05的结果
      if((nrow(mrTab)>=3) && (mrResult$pval[3]<0.05)){
        #筛选五种方法OR方向一致的结果
        if(sum(mrTab$or>1)==nrow(mrTab) | sum(mrTab$or<1)==nrow(mrTab)){
          #多效性pvalue大于0.05
          if(as.numeric(pleioTab$pval)>0.05){
            #孟德尔随机化结果方向与差异分析方向一致
            if((geneRT[i,"avg_log2FC"] * mrResult$b[3])>0){
              sigTab=rbind(sigTab, mrTab)
              #输出孟德尔随机化分析的结果
              write.csv(snpTab, file=paste0(i, ".table.SNP.csv"), row.names=F)
              write.csv(mrTab, file=paste0(i, ".table.MRresult.csv"), row.names=F)
              
              #MR-PRESSO异常值检测(偏倚的SNP)
              if(nrow(snpTab)>3){
                presso=run_mr_presso(dat)
                write.csv(presso[[1]]$`MR-PRESSO results`$`Global Test`, file=paste0(i, ".table.MR-PRESSO_Global.csv"))
                write.csv(presso[[1]]$`MR-PRESSO results`$`Outlier Test`, file=paste0(i, ".table.MR-PRESSO_Outlier.csv"))
              }
              
              #输出异质性检验的结果
              heterTab=mr_heterogeneity(dat)
              write.csv(heterTab, file=paste0(i, ".table.heterogeneity.csv"), row.names=F)
              
              #输出多效性检验的结果
              write.csv(pleioTab, file=paste0(i, ".table.pleiotropy.csv"), row.names=F)
              
              #绘制散点图
              pdf(file=paste0(i, ".scatter_plot.pdf"), width=7, height=6.5)
              p1=mr_scatter_plot(mrResult, dat)
              print(p1)
              dev.off()
              
              #森林图
              res_single=mr_singlesnp(dat)      #得到每个工具变量对结局的影响
              pdf(file=paste0(i, ".forest.pdf"), width=6.5, height=5)
              p2=mr_forest_plot(res_single)
              print(p2)
              dev.off()
              
              #漏斗图
              pdf(file=paste0(i, ".funnel_plot.pdf"), width=6.5, height=6)
              p3=mr_funnel_plot(singlesnp_results = res_single)
              print(p3)
              dev.off()
              
              #留一法敏感性分析
              pdf(file=paste0(i, ".leaveoneout.pdf"), width=6.5, height=5)
              p4=mr_leaveoneout_plot(leaveoneout_results = mr_leaveoneout(dat))
              print(p4)
              dev.off()
            }
          }
        }
      }
    }
  }
}
#输出所有基因孟德尔随机化分析的结果
write.csv(outTab, file="all.MRresult.csv", row.names=F)
#输出所有显著基因孟德尔随机化分析的结果
write.csv(sigTab, file="all.sigMRresult.csv", row.names=F)
write.table(unique(sigTab[,"exposure"]), file="all.sigGeneList.txt", row.names=F, col.names=F, quote=F)
 
library(clusterProfiler)
library(AnnotationDbi)
library(stats4)
library(BiocGenerics)
library(Biobase)
library(IRanges)
library(S4Vectors)
library(org.Hs.eg.db)
library(enrichplot)
library(ggplot2)
library(circlize)
library(RColorBrewer)
library(dplyr)
library(grid)
library(ComplexHeatmap)


pvalueFilter=0.05       
adjPvalFilter=1       

colorSel="p.adjust"
if(adjPvalFilter>0.05){
	colorSel="pvalue"
}

setwd("/")       
rt=read.table("genemania-genes.txt", header=T, sep="\t", check.names=F)     

 
genes=unique(as.vector(rt[,1]))
entrezIDs=mget(genes, org.Hs.egSYMBOL2EG, ifnotfound=NA)
entrezIDs=entrezIDs[!is.na(entrezIDs)]
gene=as.character(entrezIDs)
#gene=gsub("c\\(\"(\\d+)\".*", "\\1", gene)

 
kk=enrichGO(gene=gene, OrgDb=org.Hs.eg.db, pvalueCutoff=1, qvalueCutoff=1, ont="all", readable=T)
GO=as.data.frame(kk)
GO=GO[(GO$pvalue<pvalueFilter & GO$p.adjust<adjPvalFilter),]
 
write.table(GO, file="GO.txt", sep="\t", quote=F, row.names = F)

pdf(file="barplot.pdf", width=9, height=7)
bar=barplot(kk, drop=TRUE, showCategory=10, label_format=100, split="ONTOLOGY", color=colorSel) + facet_grid(ONTOLOGY~., scale='free')
print(bar)
dev.off()
		
pdf(file="bubble.pdf", width=9, height=7)
bub=dotplot(kk, showCategory=10, orderBy="GeneRatio", label_format=100, split="ONTOLOGY", color=colorSel) + facet_grid(ONTOLOGY~., scale='free')
print(bub)
dev.off()

ontology.col=c("#00CC33FF", "#FFC20AFF", "#CC33FFFF")
data=GO[order(GO$pvalue),]
datasig=data[data$pvalue<0.05,,drop=F]
BP = datasig[datasig$ONTOLOGY=="BP",,drop=F]
CC = datasig[datasig$ONTOLOGY=="CC",,drop=F]
MF = datasig[datasig$ONTOLOGY=="MF",,drop=F]
BP = head(BP,6)
CC = head(CC,6)
MF = head(MF,6)
data = rbind(BP,CC,MF)
main.col = ontology.col[as.numeric(as.factor(data$ONTOLOGY))]

BgGene = as.numeric(sapply(strsplit(data$BgRatio,"/"),'[',1))
Gene = as.numeric(sapply(strsplit(data$GeneRatio,'/'),'[',1))
ratio = Gene/BgGene
logpvalue = -log(data$pvalue,10)
logpvalue.col = brewer.pal(n = 8, name = "Reds")
f = colorRamp2(breaks = c(0,2,4,6,8,10,15,20), colors = logpvalue.col)
BgGene.col = f(logpvalue)
df = data.frame(GO=data$ID,start=1,end=max(BgGene))
rownames(df) = df$GO
bed2 = data.frame(GO=data$ID,start=1,end=BgGene,BgGene=BgGene,BgGene.col=BgGene.col)
bed3 = data.frame(GO=data$ID,start=1,end=Gene,BgGene=Gene)
bed4 = data.frame(GO=data$ID,start=1,end=max(BgGene),ratio=ratio,col=main.col)
bed4$ratio = bed4$ratio/max(bed4$ratio)*9.5

pdf(file="GO.circlize.pdf", width=10, height=10)
par(omi=c(0.1,0.1,0.1,1.5))
circos.par(track.margin=c(0.01,0.01))
circos.genomicInitialize(df,plotType="none")
circos.trackPlotRegion(ylim = c(0, 1), panel.fun = function(x, y) {
  sector.index = get.cell.meta.data("sector.index")
  xlim = get.cell.meta.data("xlim")
  ylim = get.cell.meta.data("ylim")
  circos.text(mean(xlim), mean(ylim), sector.index, cex = 0.8, facing = "bending.inside", niceFacing = TRUE)
}, track.height = 0.08, bg.border = NA,bg.col = main.col)

for(si in get.all.sector.index()) {
  circos.axis(h = "top", labels.cex = 0.6, sector.index = si,track.index = 1,
              major.at=seq(0,max(BgGene),by=100),labels.facing = "clockwise")
}
f = colorRamp2(breaks = c(-1, 0, 1), colors = c("green", "black", "red"))
circos.genomicTrack(bed2, ylim = c(0, 1),track.height = 0.1,bg.border="white",
                    panel.fun = function(region, value, ...) {
                      i = getI(...)
                      circos.genomicRect(region, value, ytop = 0, ybottom = 1, col = value[,2], 
                                         border = NA, ...)
                      circos.genomicText(region, value, y = 0.4, labels = value[,1], adj=0,cex=0.8,...)
                    })
circos.genomicTrack(bed3, ylim = c(0, 1),track.height = 0.1,bg.border="white",
                    panel.fun = function(region, value, ...) {
                      i = getI(...)
                      circos.genomicRect(region, value, ytop = 0, ybottom = 1, col = '#BA55D3', 
                                         border = NA, ...)
                      circos.genomicText(region, value, y = 0.4, labels = value[,1], cex=0.9,adj=0,...)
                    })
circos.genomicTrack(bed4, ylim = c(0, 10),track.height = 0.35,bg.border="white",bg.col="grey90",
                    panel.fun = function(region, value, ...) {
                      cell.xlim = get.cell.meta.data("cell.xlim")
                      cell.ylim = get.cell.meta.data("cell.ylim")
                      for(j in 1:9) {
                        y = cell.ylim[1] + (cell.ylim[2]-cell.ylim[1])/10*j
                        circos.lines(cell.xlim, c(y, y), col = "#FFFFFF", lwd = 0.3)
                      }
                      circos.genomicRect(region, value, ytop = 0, ybottom = value[,1], col = value[,2], 
                                         border = NA, ...)
                      #circos.genomicText(region, value, y = 0.3, labels = value[,1], ...)
                    })
circos.clear()
middle.legend = Legend(
  labels = c('Number of Genes','Number of Select','Rich Factor(0-1)'),
  type="points",pch=c(15,15,17),legend_gp = gpar(col=c('pink','#BA55D3',ontology.col[1])),
  title="",nrow=3,size= unit(3, "mm")
)
circle_size = unit(1, "snpc")
draw(middle.legend,x=circle_size*0.42)

main.legend = Legend(
  labels = c("Biological Process", "Cellular Component", "Molecular Function"),  type="points",pch=15,
  legend_gp = gpar(col=ontology.col), title_position = "topcenter",
  title = "ONTOLOGY", nrow = 3,size = unit(3, "mm"),grid_height = unit(5, "mm"),
  grid_width = unit(5, "mm")
)

logp.legend = Legend(
  labels=c('(0,2]','(2,4]','(4,6]','(6,8]','(8,10]','(10,15]','(15,20]','>=20'),
  type="points",pch=16,legend_gp=gpar(col=logpvalue.col),title="-log10(Pvalue)",
  title_position = "topcenter",grid_height = unit(5, "mm"),grid_width = unit(5, "mm"),
  size = unit(3, "mm")
)
lgd = packLegend(main.legend,logp.legend)
circle_size = unit(1, "snpc")
print(circle_size)
draw(lgd, x = circle_size*0.85, y=circle_size*0.55,just = "left")
dev.off()
